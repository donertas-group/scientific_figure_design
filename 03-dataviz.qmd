# Data Visualization

```{r}
#| echo: FALSE
#| message: FALSE
#| error: FALSE

source("common.R")
```

Data visualization is, in short, the graphical representation of data. However, it is important to note that it is a scientific discipline focusing on clear and efficient communication of data. The same data can be represented in many ways, which differ not only in clarity and efficiency but also in visual attraction. For example, let's have a look at the cars dataset from base R:

```{r}
glimpse(cars) 
```

We can represent the same data in many different ways:

```{r , fig.height= 4, fig.width = 6.57}
barx <- cars %>%
  mutate(n = as.factor(1:50)) %>%
  gather(key = 'key', value = 'value', -n) %>%
  ggplot(aes(y = value, x = n, fill = key)) +
  geom_bar(stat = 'identity') +
  xlab('') + guides(fill = guide_legend('')) + ylab('') +
  theme(axis.text.x = element_blank())

pointx <- cars %>%
  mutate(n = as.factor(1:50)) %>%
  gather(key = 'key', value = 'value', -n) %>%
  ggplot(aes(y = value, x = n, group = key, color = key)) +
  geom_line() +
  xlab('') + guides(color = guide_legend('')) + ylab('') +
  theme(axis.text.x = element_blank())

scatterx <- cars %>%
  ggplot(aes(x = speed, y = dist)) +
  geom_point() 

boxx <- cars %>%
  ggplot(aes(x = speed, y = dist, group = speed)) +
  geom_boxplot() 

ggarrange(barx, pointx, scatterx, boxx, common.legend = TRUE)
```

However, not all of them are equally useful. 

## Elements of Graphics

Although each figure plots different data, there are a number of elements recycled to represent data. e.g. points, lines, rectangles, position, color, length:

```{r, fig.width=6.57, fig.height=2.5}
a <- ggplot(mtcars, aes(wt, mpg)) + 
  geom_point() + 
  theme_pubr(base_size = 8)

b <- ggplot(economics_long, aes(date, value01, colour = variable)) + 
  geom_line() + 
  guides(color = 'none') + 
  theme_pubr(base_size = 8)

c <- ggplot(mpg, aes(class)) + 
  geom_bar() + 
  coord_flip() + 
  theme_pubr(base_size = 8)

ggarrange(a, b, c, ncol = 3, nrow = 1)
```

There are two main types of elements: marks and channels:

1. **Marks** are the geometric shapes that represent items or links, e.g. points, lines. 
2. **Channels** control how these marks appear and they code for the attributes, e.g. color, length. 

Let's have a look at the following examples and decide what these elements are: 

```{r, fig.height= 6.57, fig.width = 6.57}
a <- data.frame(x = 1:3, y = c(1, 2.5, 5)) %>%
  ggplot(aes(x = x, y = y)) +
  geom_bar(stat = 'identity') + 
  xlab('') + 
  ylab('') +
  ggtitle('Mark: Rectangle\nChannel: Length')

b <- data.frame(x = rnorm(10), y = rnorm(10)) %>%
  ggplot(aes(x = x, y = y)) +
  geom_point(shape = 17, size = 2.5) + 
  xlab('') + 
  ylab('') +
  ggtitle('Mark: Triangle\nChannel: x and y position')

c <- data.frame(group = as.factor(letters[1:3]), y = c(25, 45, 30)) %>%
  ggplot(aes(fill = group, y = y, x = "")) +
  geom_bar(stat = 'identity') +
  coord_polar('y', start = 0) +
  theme_void() +
  ggtitle('Mark: Circle segment\nChannel: Color and angle')

d <- gapminder::gapminder %>% 
  filter(year == "2007") %>% 
  dplyr::select(-year) %>%
  arrange(desc(pop)) %>%
  mutate(country = factor(country, country)) %>%
  ggplot(aes(x = gdpPercap, y = lifeExp, size = pop, fill = continent)) +
  geom_point(alpha = 0.5, shape = 21, color = "black") +
  scale_size(range = c(.1, 24), name = "Population (M)") +
  scale_fill_viridis(discrete = TRUE, guide = FALSE, option = "A") +
  theme(legend.position = "bottom") +
  ylab("") +
  xlab("") +
  theme(legend.position = "none") +
  ggtitle('Mark: Circle\nChannel: Color, area, x and y position')

ggarrange(a, b, c, d)
```

